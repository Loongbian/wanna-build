#!/bin/sh
set -e

# Set the variables below to fit your configuration. You can then use
# cron to have this script run regulartly to automatically update the
# wanna-build database

# Configuration file
CONFFILE="/srv/wanna-build/etc/wb-ports-update.conf"

# Cache directory
CACHEDIR="/srv/wanna-build/tmp/archive/debian-ports"

# Log directory
LOGDIR="/srv/wanna-build/logs"

# There should be no need to edit anything below this point, unless there
# are problems.

#-----------------------------------------------------------------------------#

# Sanitize environment
export PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/bin:/sbin
export TZ=UTC
unset LANG
unset LC_ALL

# A few checks
if ! [ -f "$CONFFILE" ]; then
  echo "Configuration file not found"
  exit 2
fi

# Create cache directory if needed
if ! [ -d "$CACHEDIR" ]; then
  mkdir -p "$CACHEDIR"
fi

# Create log directory if needed
if ! [ -d "$LOGDIR" ]; then
  mkdir -p "$LOGDIR"
fi

# Check to see if another sync is in progress
LOCKFILE="$CACHEDIR/wb-update.lck"
if lockfile -! -r 0 "$LOCKFILE"; then
  echo "Unable to start an update, lock file exists"
  exit 1
fi
# Note: on some non-Debian systems, trap doesn't accept "exit" as signal
# specification. If that's the case on your system, try using "0".
trap "rm -f $LOCKFILE > /dev/null 2>&1" EXIT INT QUIT

# Logfile
LOGFILE=$LOGDIR/merge.debian-ports.log

(echo -n "Starting wanna-build update - " ; date) >> $LOGFILE

egrep -v '^[[:space:]]*(#|$)'  $CONFFILE |
{
  while read KEY SEP VALUE; do
    case $SEP in
      '{')
        NAME="$KEY"
        ARCH_ALL="no"
        ARCHITECTURE=""
        DISTRIBUTION=""
        PACKAGES=""
        SOURCES=""
        PAS=""
        ;;
      '=')
        case "$KEY" in
          "arch-all")
            ARCH_ALL="$VALUE"
            ;;
          "architecture")
            ARCHITECTURE="$VALUE"
            ;;
          "distribution")
            DISTRIBUTION="$VALUE"
            ;;
          "packages")
            PACKAGES="$PACKAGES $VALUE"
            ;;
          "sources")
            SOURCES="$SOURCES $VALUE"
            ;;
          "packages-arch-specific")
            PAS="$VALUE"
            ;;
          *)
            echo "Parse error: $KEY $SEP $VALUE"
            exit 3
            ;;
        esac
        ;;
      "")
        if [ $KEY != "}" ] ; then
          echo "Parse error: $KEY $SEP $VALUE"
          exit 3
        fi
        if [ -z "$ARCHITECTURE" ] ; then
          echo "Architecture not set"
          exit 4
        fi
        if [ -z "$DISTRIBUTION" ] ; then
          echo "Distribution not set"
          exit 4
        fi
        if [ -z "$PACKAGES" ] ; then
          echo "Packages files not set"
          exit 4
        fi
        if [ -z "$SOURCES" ] ; then
          echo "Sources files not set"
          exit 4
        fi

        #
        # Update process
        #
        echo "" >> $LOGFILE
        echo "$NAME" >> $LOGFILE
        echo "  + Distribution: $DISTRIBUTION" >> $LOGFILE
        echo "  + Architecture: $ARCHITECTURE" >> $LOGFILE

        # Clear error flag
        ERROR=0

        # Create cache directory if needed
        CURRENTCACHEDIR=$CACHEDIR/$NAME
        if ! [ -d $CURRENTCACHEDIR ]; then
          mkdir -p $CURRENTCACHEDIR
        fi

        # Get Sources
        echo "  + Getting Sources..." >> $LOGFILE
        rm -f $CURRENTCACHEDIR/Sources
        for SOURCE in $SOURCES ; do
          echo "    + $SOURCE" >> $LOGFILE
          wget --quiet --tries=20 --dns-timeout=10 --connect-timeout=10 --read-timeout=120 -O $CURRENTCACHEDIR/Sources.tmp $SOURCE 2>> $LOGFILE || ERROR=1
          case $SOURCE in
            *.gz)
              zcat $CURRENTCACHEDIR/Sources.tmp >> $CURRENTCACHEDIR/Sources 2>> $LOGFILE || ERROR=1
              ;;
            *.bz2)
              bzcat $CURRENTCACHEDIR/Sources.tmp >> $CURRENTCACHEDIR/Sources 2>> $LOGFILE || ERROR=1
              ;;
            *.xz)
              xzcat $CURRENTCACHEDIR/Sources.tmp >> $CURRENTCACHEDIR/Sources 2>> $LOGFILE || ERROR=1
              ;;
            *)
              cat $CURRENTCACHEDIR/Sources.tmp 2>> $LOGFILE || ERROR=1
              ;;
          esac
        done
        if ! test -s $CURRENTCACHEDIR/Sources ; then
            ERROR=1
        fi

        # Get Packages
        echo "  + Getting Packages..." >> $LOGFILE
        rm -f $CURRENTCACHEDIR/Packages
        for PACKAGE in $PACKAGES ; do
          echo "    + $PACKAGE" >> $LOGFILE
          wget --quiet --tries=20 --dns-timeout=10 --connect-timeout=10 --read-timeout=120 -O $CURRENTCACHEDIR/Packages.tmp $PACKAGE 2>> $LOGFILE || ERROR=1
          case $PACKAGE in
            *.gz)
              zcat $CURRENTCACHEDIR/Packages.tmp >> $CURRENTCACHEDIR/Packages 2>> $LOGFILE || ERROR=1
              ;;
            *.bz2)
              bzcat $CURRENTCACHEDIR/Packages.tmp >> $CURRENTCACHEDIR/Packages 2>> $LOGFILE || ERROR=1
              ;;
            *.xz)
              xzcat $CURRENTCACHEDIR/Packages.tmp >> $CURRENTCACHEDIR/Packages 2>> $LOGFILE || ERROR=1
              ;;
            *)
              cat $CURRENTCACHEDIR/Packages.tmp >> $CURRENTCACHEDIR/Packages 2>> $LOGFILE || ERROR=1
              ;;
          esac
        done
        if ! test -s $CURRENTCACHEDIR/Packages ; then
            ERROR=1
        fi

        # If all files have been downloaded successfully
        if [ $ERROR = 0 ] ; then
          # Filter sources list
          echo "  + Filtering sources list..." >> $LOGFILE
          /srv/wanna-build/bin/keep-latest source $CURRENTCACHEDIR/Sources > $CURRENTCACHEDIR/Sources.filtered

          # Filter packages list
          echo "  + Filtering packages list..." >> $LOGFILE
          /srv/wanna-build/bin/keep-latest $ARCHITECTURE $CURRENTCACHEDIR/Packages > $CURRENTCACHEDIR/Packages.filtered

          # Create Build-Essential list
          echo "  + Creating Build-Essential list..." >> $LOGFILE
          : > $CURRENTCACHEDIR/Build-Essential
          for pkg in make binutils dpkg-dev perl; do
            grep-dctrl -S -s Package,Version,Priority,Section,Architecture -X $pkg < $CURRENTCACHEDIR/Packages.filtered | sed -e '/^Version/ s,$,+Build-Essential,' >> $CURRENTCACHEDIR/Build-Essential
          done
          grep-dctrl -F Priority required -s Package,Version,Priority,Section,Architecture < $CURRENTCACHEDIR/Packages.filtered | sed -e '/^Version/ s,$,+Build-Essential,' >> $CURRENTCACHEDIR/Build-Essential
          grep-dctrl -F Essential -i yes -s Package,Version,Priority,Section,Architecture < $CURRENTCACHEDIR/Packages.filtered | sed -e '/^Version/ s,$,+Build-Essential,' >> $CURRENTCACHEDIR/Build-Essential

          # Merge infos
          echo "  + Merging infos..." >> $LOGFILE
          /srv/wanna-build/bin/wanna-build -v --Pas $PAS --merge-v3 -A $ARCHITECTURE -d $DISTRIBUTION $CURRENTCACHEDIR/Packages.filtered .  $CURRENTCACHEDIR/Sources.filtered . $CURRENTCACHEDIR/Packages.filtered $CURRENTCACHEDIR/Build-Essential >> $LOGFILE 2>&1 || true
        else
          echo "  Error, skipping wanna-build update" >> $LOGFILE
        fi

        ;;
    esac
  done
}

sleep 5

(echo ; echo -n "wanna-build update finished - " ; date) >> $LOGFILE
